/*
 * Copyright (c) 2019 Magic Leap, Inc. All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext.kotlin_version = '1.3.50'
    repositories {
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    lintOptions {
        abortOnError false
    }
    testOptions {
        unitTests {
            all {
                // required to run tests with coverage when using Robolectric
                jvmArgs '-noverify'
                jacoco {
                    includeNoLocationClasses = true
                }
                testLogging {
                    events "passed", "skipped", "failed", "standardOut", "standardError"
                }
            }
        }
        unitTests.includeAndroidResources = true
    }

    buildTypes {
        // we should not use debug (libraries use always release)
        release {
            testCoverageEnabled = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    maven {
        // For normal builds (if there is a parent project)
        // (react-native dependency from dependencies section is taken
        // from node_modules of a parent project, not from public maven)
        url "$rootDir/../node_modules/react-native/android"
    }
    maven {
        // For a standalone library builds from Android Studio (e.g. tests).
        // It assumes that node_modules folder with a desired React library (0.59.9)
        // is placed next to this library folder.
        // Without this the old version of React will be used from public Maven,
        // and some tests will not compile.
        url "$rootDir/../../node_modules/react-native/android"
    }
    maven {
        // For standalone library builds node_modules with react-native
        // library can also be located inside this project directory
        url "$rootDir/node_modules/react-native/android"
    }
    mavenCentral()
    maven {
        url 'https://maven.google.com/'
        name 'Google'
    }
    jcenter()
}

dependencies {
    // react native is taken from node_modules (main project), not from maven
    implementation 'com.facebook.react:react-native:+'
    // In case of AR core update we must also re-generate res/raw/*sfb files using latest
    // Google Sceneform Tools (Android Studio plugin). Source files are located in /sources folder.
    implementation "com.google.ar.sceneform.ux:sceneform-ux:1.12.0" // AR Core
    implementation 'com.google.ar.sceneform:assets:1.12.0' //runtime models loading
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2' // 1.1.0 is not working with React

    implementation 'com.github.bumptech.glide:glide:4.9.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'

    //TESTING
    testImplementation 'junit:junit:4.12'
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'org.robolectric:robolectric:4.3'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation 'org.amshove.kluent:kluent-android:1.56'

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'

}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testReleaseUnitTest', 'createReleaseCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def tree = fileTree(dir: "${buildDir}/intermediates/classes/release", excludes: fileFilter)
    def kotlinTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/release", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([tree], [kotlinTree])
    executionData.from = fileTree(dir: "$buildDir", includes: [
            "jacoco/testReleaseUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}
